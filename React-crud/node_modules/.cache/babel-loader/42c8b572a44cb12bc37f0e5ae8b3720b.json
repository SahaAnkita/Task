{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Desktop/crud-app/src/contexts/EmployeeContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\"; // import { v4 as uuidv4 } from 'uuid';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EmployeeContext = /*#__PURE__*/createContext();\n\nconst EmployeeContextProvider = props => {\n  _s();\n\n  const [employees, setEmployees] = useState([{\n    id: 1,\n    name: 'Ankita Saha',\n    age: 26,\n    address: 'Kolkata',\n    gender: 'Female',\n    about: 'developer',\n    image: ''\n  }, {\n    id: 2,\n    name: 'Ananya Mondal',\n    age: 27,\n    address: 'Jodhpur',\n    gender: 'Female',\n    about: 'developer',\n    image: ''\n  }, {\n    id: 3,\n    name: 'Chhaya Saha',\n    age: 40,\n    address: 'Kolkata',\n    gender: 'Female',\n    about: 'developer',\n    image: ''\n  }, {\n    id: 4,\n    name: 'Samir Saha',\n    age: 50,\n    address: 'Chennai',\n    gender: 'Male',\n    about: 'developer',\n    image: ''\n  }]);\n\n  const addEmployee = (id, name, age, address, gender, about) => {\n    setEmployees([...employees, {\n      id,\n      name,\n      age,\n      address,\n      gender,\n      about\n    }]);\n  };\n\n  const deleteEmployee = id => {\n    setEmployees(employees.filter(employee => employee.id !== id));\n  };\n\n  const updateEmployee = (id, updatedEmployee) => {\n    setEmployees(employees.map(employee => employee.id === id ? updatedEmployee : employee));\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmployeeContext.Provider, {\n    value: {\n      employees,\n      addEmployee,\n      deleteEmployee,\n      updateEmployee\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeeContextProvider, \"eqcA2TYud8zEIQxCFgBfoWxtCHM=\");\n\n_c = EmployeeContextProvider;\nexport default EmployeeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeContextProvider\");","map":{"version":3,"sources":["/home/ankita/Desktop/crud-app/src/contexts/EmployeeContext.jsx"],"names":["createContext","useState","EmployeeContext","EmployeeContextProvider","props","employees","setEmployees","id","name","age","address","gender","about","image","addEmployee","deleteEmployee","filter","employee","updateEmployee","updatedEmployee","map","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC,C,CACA;;;AAEA,OAAO,MAAMC,eAAe,gBAAGF,aAAa,EAArC;;AAEP,MAAMG,uBAAuB,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CACvC;AAAEM,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,aAAf;AAA8BC,IAAAA,GAAG,EAAE,EAAnC;AAAuCC,IAAAA,OAAO,EAAE,SAAhD;AAA2DC,IAAAA,MAAM,EAAE,QAAnE;AAA6EC,IAAAA,KAAK,EAAE,WAApF;AAAiGC,IAAAA,KAAK,EAAE;AAAxG,GADuC,EAEvC;AAAEN,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,eAAf;AAAgCC,IAAAA,GAAG,EAAE,EAArC;AAAyCC,IAAAA,OAAO,EAAE,SAAlD;AAA6DC,IAAAA,MAAM,EAAE,QAArE;AAA+EC,IAAAA,KAAK,EAAE,WAAtF;AAAmGC,IAAAA,KAAK,EAAE;AAA1G,GAFuC,EAGvC;AAAEN,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,aAAf;AAA8BC,IAAAA,GAAG,EAAE,EAAnC;AAAuCC,IAAAA,OAAO,EAAE,SAAhD;AAA2DC,IAAAA,MAAM,EAAE,QAAnE;AAA6EC,IAAAA,KAAK,EAAE,WAApF;AAAiGC,IAAAA,KAAK,EAAE;AAAxG,GAHuC,EAIvC;AAAEN,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,YAAf;AAA6BC,IAAAA,GAAG,EAAE,EAAlC;AAAsCC,IAAAA,OAAO,EAAE,SAA/C;AAA0DC,IAAAA,MAAM,EAAE,MAAlE;AAA0EC,IAAAA,KAAK,EAAE,WAAjF;AAA8FC,IAAAA,KAAK,EAAE;AAArG,GAJuC,CAAD,CAA1C;;AAOA,QAAMC,WAAW,GAAG,CAACP,EAAD,EAAIC,IAAJ,EAAUC,GAAV,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,KAAhC,KAA0C;AAC1DN,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEE,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA,GAAZ;AAAiBC,MAAAA,OAAjB;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA;AAAlC,KAAf,CAAD,CAAZ;AACH,GAFD;;AAGA,QAAMG,cAAc,GAAIR,EAAD,IAAQ;AAC3BD,IAAAA,YAAY,CAACD,SAAS,CAACW,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACV,EAAT,KAAgBA,EAA7C,CAAD,CAAZ;AACH,GAFD;;AAIA,QAAMW,cAAc,GAAG,CAACX,EAAD,EAAKY,eAAL,KAAyB;AAC5Cb,IAAAA,YAAY,CAACD,SAAS,CAACe,GAAV,CAAeH,QAAD,IAAcA,QAAQ,CAACV,EAAT,KAAgBA,EAAhB,GAAqBY,eAArB,GAAuCF,QAAnE,CAAD,CAAZ;AACH,GAFD;;AAGA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEZ,MAAAA,SAAF;AAAaS,MAAAA,WAAb;AAA0BC,MAAAA,cAA1B;AAA0CG,MAAAA;AAA1C,KAAjC;AAAA,cACKd,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvBD;;GAAMlB,uB;;KAAAA,uB;AAwBN,eAAeA,uBAAf","sourcesContent":["import { createContext, useState } from \"react\";\n// import { v4 as uuidv4 } from 'uuid';\n\nexport const EmployeeContext = createContext()\n\nconst EmployeeContextProvider = (props) => {\n    const [employees, setEmployees] = useState([\n        { id: 1, name: 'Ankita Saha', age: 26, address: 'Kolkata', gender: 'Female', about: 'developer', image: '' },\n        { id: 2, name: 'Ananya Mondal', age: 27, address: 'Jodhpur', gender: 'Female', about: 'developer', image: '' },\n        { id: 3, name: 'Chhaya Saha', age: 40, address: 'Kolkata', gender: 'Female', about: 'developer', image: '' },\n        { id: 4, name: 'Samir Saha', age: 50, address: 'Chennai', gender: 'Male', about: 'developer', image: '' }\n    ])\n\n    const addEmployee = (id,name, age, address, gender, about) => {\n        setEmployees([...employees, { id, name, age, address, gender, about }])\n    }\n    const deleteEmployee = (id) => {\n        setEmployees(employees.filter(employee => employee.id !== id))\n    }\n\n    const updateEmployee = (id, updatedEmployee) => {\n        setEmployees(employees.map((employee) => employee.id === id ? updatedEmployee : employee))\n    }\n    return (\n        <EmployeeContext.Provider value={{ employees, addEmployee, deleteEmployee, updateEmployee }}>\n            {props.children}\n        </EmployeeContext.Provider>\n    )\n}\nexport default EmployeeContextProvider;"]},"metadata":{},"sourceType":"module"}